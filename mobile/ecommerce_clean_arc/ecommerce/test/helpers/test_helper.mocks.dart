// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ecommerce/features/product/domain/entities/product_ent.dart'
    as _i2;
import 'package:ecommerce/features/product/domain/repositories/productrepositories.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProduct_0 extends _i1.SmartFake implements _i2.Product {
  _FakeProduct_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepositories].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepositories extends _i1.Mock
    implements _i3.ProductRepositories {
  MockProductRepositories() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Product> createProduct(_i2.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [product],
        ),
        returnValue: _i4.Future<_i2.Product>.value(_FakeProduct_0(
          this,
          Invocation.method(
            #createProduct,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Product>);

  @override
  _i4.Future<_i2.Product> updateProduct(_i2.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i4.Future<_i2.Product>.value(_FakeProduct_0(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i4.Future<_i2.Product>);

  @override
  _i4.Future<void> deleteProduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Product> getProuduct(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getProuduct,
          [id],
        ),
        returnValue: _i4.Future<_i2.Product>.value(_FakeProduct_0(
          this,
          Invocation.method(
            #getProuduct,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Product>);
}
